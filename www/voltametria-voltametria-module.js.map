{"version":3,"sources":["./src/app/voltametria/voltametria.module.ts","./src/app/voltametria/voltametria.page.ts","./src/app/voltametria/voltametria-routing.module.ts","./src/app/voltametria/voltametria.page.html","./src/app/voltametria/voltametria.page.scss"],"names":[],"mappings":"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","file":"voltametria-voltametria-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { VoltametriaPageRoutingModule } from './voltametria-routing.module';\r\n\r\nimport { VoltametriaPage } from './voltametria.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    VoltametriaPageRoutingModule\r\n  ],\r\n  declarations: [VoltametriaPage]\r\n})\r\nexport class VoltametriaPageModule {}\r\n","import { Component } from '@angular/core';\r\nimport { Router, NavigationExtras } from '@angular/router';\r\nimport { AlertController, ToastController } from '@ionic/angular';\r\n\r\n@Component({\r\n  selector: 'app-voltametria',\r\n  templateUrl: './voltametria.page.html',\r\n  styleUrls: ['./voltametria.page.scss'],\r\n})\r\nexport class VoltametriaPage {\r\n\r\n  operators: any[] = [];\r\n\r\n  public iconViews: any = {\r\n    operatorsIcon: 'people-circle-outline'\r\n  };\r\n\r\n  params = {\r\n    op: 'DPV',\r\n    fEsc: \"5\",\r\n    pIni: -0.6,\r\n    pFim: 0.0,\r\n    pPas: 0.005,\r\n    pPul: 0.01,\r\n    tPul: 0.01,\r\n    tPas: 0.025,\r\n    tEqu: 5,\r\n  };\r\n\r\n  patientParams = {\r\n    nome: \"\",\r\n    cpf: \"\",\r\n    idade: '',\r\n    peso: '',\r\n  };\r\n\r\n  currentUser = {\r\n    name: \"Default\",\r\n    registerOperator: \"0000\",\r\n  }\r\n\r\n  estimatedParams = {\r\n    sRat: Math.round((this.params.pPas / this.params.tPas) * 10) / 10,\r\n    nPnt: Math.round(Math.abs(this.params.pFim - this.params.pIni) / this.params.pPas),\r\n    tEst: Math.abs(this.params.pFim - this.params.pIni) / (this.params.pPas / this.params.tPas)\r\n  };\r\n\r\n  constructor(private router: Router, private alertController: AlertController, private toastController: ToastController) {\r\n    let operatorsJson = localStorage.getItem('operatorDB');\r\n    let currentUserJson = localStorage.getItem('currentUserDB');\r\n    if (operatorsJson != null) {\r\n      this.operators = JSON.parse(operatorsJson);\r\n    }\r\n    if (currentUserJson != null) {\r\n      this.currentUser = JSON.parse(currentUserJson);\r\n    }\r\n  }\r\n\r\n  operatorsView(view) {\r\n    this.iconViews[view] === 'people-circle' ?\r\n      this.iconViews[view] = 'people-circle-outline' :\r\n      this.iconViews[view] = 'people-circle';\r\n  }\r\n\r\n  async addOperator() {\r\n    const alert = await this.alertController.create({\r\n      cssClass: 'my-custom-class',\r\n      header: 'Fill in operator information!',\r\n      inputs: [\r\n        {\r\n          name: 'nameOperator',\r\n          type: 'text',\r\n          placeholder: 'Name',\r\n        },\r\n        {\r\n          name: 'registerOperator',\r\n          type: 'text',\r\n          id: 'name2-id',\r\n          placeholder: 'Registration Number',\r\n        }\r\n      ],\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n            console.log('Confirm Cancel');\r\n          },\r\n        },\r\n        {\r\n          text: 'Ok',\r\n          handler: (form) => {\r\n            let operator = { name: form.nameOperator, registerOperator: form.registerOperator }\r\n            this.add(operator);\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async add(operator: any) {\r\n    if (operator.name.trim().length < 1 || operator.registerOperator.trim().length < 1) {\r\n      const toast = await this.toastController.create({\r\n        message: \"Fill in the fields correctly!\",\r\n        duration: 2000,\r\n        position: 'middle',\r\n      });\r\n      toast.present();\r\n      return;\r\n    } else {\r\n      this.operators.push(operator);\r\n      this.updateLocalStorage();\r\n    }\r\n  }\r\n\r\n  goToChart() {\r\n\r\n    if (this.patientParams.nome == '' || this.patientParams.cpf == '' || this.patientParams.idade == '' || this.patientParams.peso == '') {\r\n      this.presentAlertConfirm();\r\n    } else {\r\n      const navigationExtras: NavigationExtras = {\r\n        state: {\r\n          params: { ...this.params, ...this.estimatedParams, ...this.patientParams, ...this.currentUser }\r\n        }\r\n      };\r\n      this.router.navigate(['/chart'], navigationExtras);\r\n    }\r\n\r\n  }\r\n\r\n  updateLocalStorage() {\r\n    localStorage.setItem('operatorDB', JSON.stringify(this.operators));\r\n  }\r\n\r\n  delete(operator: any) {\r\n    this.operators = this.operators.filter(operatorArray => operator != operatorArray);\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  setCurrentUser(operator: any) {\r\n    this.currentUser = operator;\r\n    localStorage.setItem('currentUserDB', JSON.stringify(this.currentUser));\r\n    this.iconViews.operatorsIcon = 'people-circle-outline';\r\n  }\r\n\r\n  async presentAlertConfirm() {\r\n    const alert = await this.alertController.create({\r\n      cssClass: 'my-custom-class',\r\n      header: 'Some patient information was not filled in!',\r\n      message: '<strong> Continue ?</strong>',\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: (blah) => {\r\n            console.log('Confirm Cancel: blah');\r\n          },\r\n        },\r\n        {\r\n          text: 'Okay',\r\n          handler: () => {\r\n            if (this.patientParams.nome == '') {\r\n              this.patientParams.nome = 'Not Provided'\r\n            }\r\n            if (this.patientParams.cpf == '') {\r\n              this.patientParams.cpf = 'Not Provided'\r\n            }\r\n            if (this.patientParams.idade == '') {\r\n              this.patientParams.idade = 'Not Provided'\r\n            }\r\n            if (this.patientParams.peso == '') {\r\n              this.patientParams.peso = 'Not Provided'\r\n            }\r\n            console.log('Confirm Okay');\r\n            const navigationExtras: NavigationExtras = {\r\n              state: {\r\n                params: { ...this.params, ...this.estimatedParams, ...this.patientParams, ...this.currentUser }\r\n              }\r\n            };\r\n            this.router.navigate(['/chart'], navigationExtras);\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { VoltametriaPage } from './voltametria.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: VoltametriaPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class VoltametriaPageRoutingModule {}\r\n","export default \"<ion-header color=\\\"light\\\" collapse=\\\"fade\\\" [translucent]=\\\"true\\\">\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-button (click)=\\\"operatorsView('operatorsIcon')\\\" shape=\\\"round\\\" fill=\\\"clear\\\" size=\\\"small\\\" color=\\\"light\\\"\\r\\n        style=\\\"margin: 0;\\\">\\r\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"{{iconViews.operatorsIcon}}\\\" style=\\\"color: #000;\\\"></ion-icon>\\r\\n      </ion-button>\\r\\n    </ion-buttons>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button menu=\\\"main-menu\\\" style=\\\"color: #000;\\\"></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>\\r\\n      Analysis\\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content [fullscreen]=\\\"true\\\" color=\\\"tertiary\\\">\\r\\n\\r\\n  <ion-card>\\r\\n    <ion-card-header>\\r\\n      <ion-card-subtitle>Welcome !!</ion-card-subtitle>\\r\\n      <ion-card-title>{{currentUser.name}}</ion-card-title>\\r\\n    </ion-card-header>\\r\\n    <ion-card-content>\\r\\n      <h2>\\r\\n        Register Operator: <br>\\r\\n      </h2>\\r\\n      <h4>#BR{{currentUser.registerOperator}} <br>\\r\\n      </h4>\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n\\r\\n  <ion-card [style.display]=\\\"iconViews.operatorsIcon === 'people-circle'?'block':'none'\\\">\\r\\n    <ion-card-header>\\r\\n      <ion-card-subtitle>Operator list</ion-card-subtitle>\\r\\n    </ion-card-header>\\r\\n    <ion-card-content>\\r\\n      <ion-list lines=\\\"full\\\" mode=\\\"ios\\\" class=\\\"animated bounceInUp\\\">\\r\\n        <ion-item-sliding *ngFor=\\\"let operator of operators\\\">\\r\\n          <ion-item>\\r\\n            <ion-icon name=\\\"person-circle-outline\\\" slot=\\\"start\\\"></ion-icon>\\r\\n            <ion-label>{{ operator.name }}</ion-label>\\r\\n          </ion-item>\\r\\n          <ion-item-options>\\r\\n            <ion-item-option color=\\\"secondary\\\" expandable (click)=\\\"setCurrentUser(operator)\\\">\\r\\n              <ion-icon slot=\\\"bottom\\\" name=\\\"checkmark\\\"></ion-icon>\\r\\n              SELECT\\r\\n            </ion-item-option>\\r\\n            <ion-item-option (click)=\\\"delete(operator)\\\" color=\\\"danger\\\" expandable>\\r\\n              <ion-icon name='trash' slot=\\\"bottom\\\"></ion-icon>\\r\\n              DELETE\\r\\n            </ion-item-option>\\r\\n          </ion-item-options>\\r\\n        </ion-item-sliding>\\r\\n      </ion-list>\\r\\n      <br>\\r\\n      <ion-button expand=\\\"block\\\" color=\\\"tertiary\\\" (click)=\\\"addOperator()\\\">ADD OPERATOR\\r\\n        <ion-icon slot=\\\"end\\\" name=\\\"add-outline\\\"></ion-icon>\\r\\n      </ion-button>\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n  <ion-card>\\r\\n    <ion-item class=\\\"item-padding\\\">\\r\\n      <ion-label>Process (required)</ion-label>\\r\\n      <ion-select [(ngModel)]=\\\"params.op\\\">\\r\\n        <ion-select-option value=\\\"DPV\\\">DPV</ion-select-option>\\r\\n        <ion-select-option value=\\\"Hibridização\\\">Hibridização</ion-select-option>\\r\\n      </ion-select>\\r\\n    </ion-item>\\r\\n  </ion-card>\\r\\n\\r\\n  <ion-card>\\r\\n    <ion-card-header>\\r\\n      <ion-card-subtitle>(optional data)</ion-card-subtitle>\\r\\n      <ion-card-title>Patient Data</ion-card-title>\\r\\n    </ion-card-header>\\r\\n\\r\\n    <ion-card-content>\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"floating\\\">Patient's Name</ion-label>\\r\\n        <ion-input [(ngModel)]=\\\"patientParams.nome\\\"></ion-input>\\r\\n      </ion-item>\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"floating\\\">Patient's CPF</ion-label>\\r\\n        <ion-input [(ngModel)]=\\\"patientParams.cpf\\\"></ion-input>\\r\\n      </ion-item>\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"floating\\\">Patient Age</ion-label>\\r\\n        <ion-input [(ngModel)]=\\\"patientParams.idade\\\"></ion-input>\\r\\n      </ion-item>\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"floating\\\">Patient Weight (Kg)</ion-label>\\r\\n        <ion-input [(ngModel)]=\\\"patientParams.peso\\\"></ion-input>\\r\\n      </ion-item>\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n\\r\\n  <ion-card>\\r\\n    <ion-card-content>\\r\\n      <ion-button expand=\\\"block\\\" color=\\\"tertiary\\\" (click)=\\\"goToChart()\\\">CONFIRM PROCESS\\r\\n        <ion-icon slot=\\\"end\\\" name=\\\"arrow-forward-outline\\\"></ion-icon>\\r\\n      </ion-button>\\r\\n    </ion-card-content>\\r\\n  </ion-card>\\r\\n\\r\\n</ion-content>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2b2x0YW1ldHJpYS5wYWdlLnNjc3MifQ== */\";"],"sourceRoot":"webpack:///"}