{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport interface SerialPermissionOptions {\n    vid: string;\n    pid: string;\n    driver: string;\n}\nexport interface SerialOpenOptions {\n    baudRate: number;\n    dataBits: number;\n    stopBits: number;\n    parity: number;\n    dtr: boolean;\n    rts: boolean;\n    sleepOnPause: boolean;\n}\n/**\n * @name Serial\n * @description\n * This plugin provides functions for working with Serial connections\n *\n * @usage\n * ```typescript\n * import { Serial } from '@ionic-native/serial/ngx';\n *\n * constructor(private serial: Serial) { }\n *\n * ...\n *\n * this.serial.requestPermission().then(() => {\n *   this.serial.open({\n *     baudRate: 9800,\n *     dataBits: 4,\n *     stopBits: 1,\n *     parity: 0,\n *     dtr: true,\n *     rts: true,\n *     sleepOnPause: false\n *   }).then(() => {\n *     console.log('Serial connection opened');\n *   });\n * }).catch((error: any) => console.log(error));\n *\n * ```\n */\nexport declare class Serial extends IonicNativePlugin {\n    /**\n     * Request permission to connect to a serial device\n     *\n     * @param options {SerialPermissionOptions} Options used to request serial permissions for an unknown device\n     * @return {Promise<any>} Returns a promise that resolves when permissions are granted\n     */\n    requestPermission(options?: SerialPermissionOptions): Promise<any>;\n    /**\n     * Open connection to a serial device\n     *\n     * @param options {SerialOpenOptions} Options used to open serial connection\n     * @return {Promise<any>} Returns a promise that resolves when the serial connection is opened\n     */\n    open(options: SerialOpenOptions): Promise<any>;\n    /**\n     * Write to a serial connection\n     *\n     * @param data {any} data to write to the serial connection\n     * @return {Promise<any>} Returns a promise that resolves when the write is complete\n     */\n    write(data: any): Promise<any>;\n    /**\n     * Write hex to a serial connection\n     *\n     * @param data {any} data to write to the serial connection\n     * @return {Promise<any>} Returns a promise that resolves when the write is complete\n     */\n    writeHex(data: any): Promise<any>;\n    /**\n     * Read from a serial connection\n     *\n     * @return {Promise<any>} Returns a promise that resolves with data read from the serial connection\n     */\n    read(): Promise<any>;\n    /**\n     * Watch the incoming data from the serial connection. Clear the watch by unsubscribing from the observable\n     *\n     * @returns {Observable<any>} Observable returns an observable that you can subscribe to\n     */\n    registerReadCallback(): Observable<any>;\n    /**\n     * Close the serial connection\n     *\n     * @return {Promise<any>} Returns a promise that resolves when the serial connection is closed\n     */\n    close(): Promise<any>;\n}\n"]}